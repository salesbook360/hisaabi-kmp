package com.hisaabi.hisaabi_kmp.products.domain.usecase

import com.hisaabi.hisaabi_kmp.products.data.repository.ProductsRepository
import com.hisaabi.hisaabi_kmp.products.domain.model.Product
import com.hisaabi.hisaabi_kmp.products.domain.model.ProductType

class AddProductUseCase(
    private val repository: ProductsRepository
) {
    suspend operator fun invoke(
        title: String,
        description: String?,
        productType: ProductType,
        retailPrice: Double = 0.0,
        wholesalePrice: Double = 0.0,
        purchasePrice: Double = 0.0,
        taxPercentage: Double = 0.0,
        discountPercentage: Double = 0.0,
        categorySlug: String? = null,
        manufacturer: String? = null,
        businessSlug: String,
        userSlug: String
    ): Result<String> {
        return try {
            // Validate input
            if (title.isBlank()) {
                return Result.failure(IllegalArgumentException("Product title is required"))
            }
            
            // For services, purchase price should be 0
            val finalPurchasePrice = if (productType == ProductType.SERVICE) 0.0 else purchasePrice
            
            // Create Product domain model
            val product = Product(
                id = 0, // Will be generated by database
                title = title,
                description = description,
                typeId = productType.type,
                taxPercentage = taxPercentage,
                discountPercentage = discountPercentage,
                retailPrice = retailPrice,
                wholesalePrice = wholesalePrice,
                purchasePrice = finalPurchasePrice,
                thumbnail = null,
                statusId = 1, // Active
                digitalId = null,
                baseUnitSlug = null,
                defaultUnitSlug = null,
                minimumQuantityUnitSlug = null,
                openingQuantityUnitSlug = null,
                categorySlug = categorySlug,
                avgPurchasePrice = finalPurchasePrice,
                openingQuantityPurchasePrice = 0.0,
                expiryDate = null,
                expiryAlert = null,
                manufacturer = manufacturer,
                slug = "", // Will be generated by repository
                businessSlug = null, // Will be set by repository
                createdBy = null, // Will be set by repository
                syncStatus = 0,
                createdAt = null,
                updatedAt = null
            )
            
            // Add product through repository
            val slug = repository.addProduct(product, businessSlug, userSlug)
            Result.success(slug)
        } catch (e: Exception) {
            Result.failure(e)
        }
    }
}


