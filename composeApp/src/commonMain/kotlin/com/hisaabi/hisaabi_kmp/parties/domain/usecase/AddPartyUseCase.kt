package com.hisaabi.hisaabi_kmp.parties.domain.usecase

import com.hisaabi.hisaabi_kmp.parties.data.repository.PartiesRepository
import com.hisaabi.hisaabi_kmp.parties.domain.model.Party
import com.hisaabi.hisaabi_kmp.parties.domain.model.PartyType

class AddPartyUseCase(
    private val repository: PartiesRepository
) {
    suspend operator fun invoke(
        name: String,
        phone: String?,
        address: String?,
        email: String?,
        description: String?,
        openingBalance: Double,
        isBalancePayable: Boolean,
        partyType: PartyType,
        businessSlug: String,
        userSlug: String,
        categorySlug: String? = null,
        areaSlug: String? = null,
        latitude: Double? = null,
        longitude: Double? = null
    ): Result<String> {
        return try {
            // Validate input
            if (name.isBlank()) {
                return Result.failure(IllegalArgumentException("Name is required"))
            }
            
            // Calculate balance based on opening balance and type
            // Payable means positive (you owe them), Receivable means negative (they owe you)
            val balance = if (openingBalance != 0.0) {
                if (isBalancePayable) openingBalance else -openingBalance
            } else {
                0.0
            }
            
            // Create lat/long string if coordinates are provided
            val latLong = if (latitude != null && longitude != null) {
                "$latitude,$longitude"
            } else null
            
            // Create Party domain model
            val party = Party(
                id = 0, // Will be generated by database
                name = name,
                phone = phone,
                address = address,
                email = email,
                description = description,
                balance = balance,
                openingBalance = openingBalance,
                roleId = partyType.type,
                categorySlug = categorySlug,
                areaSlug = areaSlug,
                latLong = latLong,
                slug = "", // Will be generated by repository
                businessSlug = null, // Will be set by repository
                createdBy = null, // Will be set by repository
                thumbnail = null,
                personStatus = 1,
                digitalId = null,
                syncStatus = 0,
                createdAt = null,
                updatedAt = null
            )
            
            // Add party through repository
            val slug = repository.addParty(party, businessSlug, userSlug)
            Result.success(slug)
        } catch (e: Exception) {
            Result.failure(e)
        }
    }
}

