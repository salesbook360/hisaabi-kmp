package com.hisaabi.hisaabi_kmp.parties.domain.usecase

import com.hisaabi.hisaabi_kmp.parties.data.repository.PartiesRepository
import com.hisaabi.hisaabi_kmp.parties.domain.model.Party
import com.hisaabi.hisaabi_kmp.parties.domain.model.PartyType

class AddPartyUseCase(
    private val repository: PartiesRepository
) {
    suspend operator fun invoke(
        name: String,
        phone: String?,
        address: String?,
        email: String?,
        description: String?,
        openingBalance: Double,
        isBalancePayable: Boolean,
        partyType: PartyType,
        businessSlug: String,
        userSlug: String,
        categorySlug: String? = null,
        areaSlug: String? = null,
        latitude: Double? = null,
        longitude: Double? = null
    ): Result<String> {
        // Validation
        if (name.isBlank()) {
            return Result.failure(Exception("Name is required"))
        }
        
        // Calculate actual opening balance based on payable/receivable
        val actualOpeningBalance = if (isBalancePayable) {
            openingBalance  // Positive for payable
        } else {
            -openingBalance  // Negative for receivable
        }
        
        // Format lat/long as string if provided
        val latLongString = if (latitude != null && longitude != null) {
            "$latitude,$longitude"
        } else null
        
        // Create party
        val party = Party(
            id = 0,  // Auto-generated
            name = name.trim(),
            phone = phone?.trim(),
            address = address?.trim(),
            balance = actualOpeningBalance,  // Initial balance = opening balance
            openingBalance = actualOpeningBalance,
            thumbnail = null,
            roleId = partyType.type,
            personStatus = 1,  // Active status
            digitalId = null,
            latLong = latLongString,
            areaSlug = areaSlug,
            categorySlug = categorySlug,
            email = email?.trim(),
            description = description?.trim(),
            slug = "",  // Will be generated by repository
            businessSlug = businessSlug,
            createdBy = userSlug,
            syncStatus = 0,  // Not synced
            createdAt = null,  // Will be set by database
            updatedAt = null
        )
        
        return try {
            val slug = repository.addParty(party, businessSlug, userSlug)
            Result.success(slug)
        } catch (e: Exception) {
            Result.failure(e)
        }
    }
}

