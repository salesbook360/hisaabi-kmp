package com.hisaabi.hisaabi_kmp.categories.domain.usecase

import com.hisaabi.hisaabi_kmp.categories.data.repository.CategoriesRepository
import com.hisaabi.hisaabi_kmp.categories.domain.model.Category
import com.hisaabi.hisaabi_kmp.categories.domain.model.CategoryType

class GetCategoriesUseCase(
    private val repository: CategoriesRepository
) {
    suspend operator fun invoke(
        categoryType: CategoryType,
        businessSlug: String
    ): Result<List<Category>> {
        return try {
            val categories = repository.getCategoriesByType(categoryType, businessSlug)
            Result.success(categories)
        } catch (e: Exception) {
            Result.failure(e)
        }
    }
}

class AddCategoryUseCase(
    private val repository: CategoriesRepository
) {
    suspend operator fun invoke(
        title: String,
        description: String?,
        categoryType: CategoryType,
        businessSlug: String,
        userSlug: String
    ): Result<String> {
        // Validation
        if (title.isBlank()) {
            return Result.failure(Exception("Title is required"))
        }
        
        // Create category
        val category = Category(
            id = 0,  // Auto-generated
            title = title.trim(),
            description = description?.trim(),
            thumbnail = null,
            typeId = categoryType.type,
            slug = "",  // Will be generated by repository
            businessSlug = businessSlug,
            createdBy = userSlug,
            syncStatus = 0,
            createdAt = null,
            updatedAt = null
        )
        
        return try {
            val slug = repository.addCategory(category, businessSlug, userSlug)
            Result.success(slug)
        } catch (e: Exception) {
            Result.failure(e)
        }
    }
}

